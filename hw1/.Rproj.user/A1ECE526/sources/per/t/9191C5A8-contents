---
title: "Recitation Session"
date: "Sep 20, 2019"
output: pdf_document
---

## Basic commands

```{r}
x <- c(1,3,2,5)
x
```
```{r}
x = c(1,6,2)
x
```
```{r}
y = c(1,4,3)
length(x)
length(y)
x+y
ls()
```
```{r}
rm(x,y)
ls()
```
```{r}
?matrix
x=matrix(data=c(1,2,3,4), nrow=2, ncol=2)
x
matrix(c(1,2,3,4),2,2,byrow=TRUE)
sqrt(x)
x^2
```
```{r}
x=rnorm(50)
y=x+rnorm(50,mean=50,sd=.1)
cor(x,y)
```
```{r}
set.seed(1303)
rnorm(50)
```
```{r}
set.seed(3)
y=rnorm(100)
mean(y)
var(y)
sqrt(var(y))
sd(y)
```

##Graphics

```{r}
x=rnorm(100)
y=rnorm(100)
plot(x,y)
plot(x,y,xlab="this is the x-axis",ylab="this is the y-axis",main="Plot of X vs Y")
```

```{r}
plot(c(0,1,2),c(1,0,1),xlab="",ylab="",col="red")
abline(1,0,col="black")
abline(2/3,0,col="blue")
abline(0.5,0,col="red")
```

### Sequence

```{r}
x=seq(1,10)
x
x=1:10
x
```
```{r}
x=seq(-pi,pi,length=50)
x
```

# Indexing Data
```{r}
A=matrix(1:16,4,4)
A
```
```{r}
A[2,3]
A[c(1,3),c(2,4)]
A[1:3,2:4]
A[1:2,]
A[,1:2]
A[1,]
```
```{r}
A
A[-c(1,3),]
A[-c(1,3),-c(1,3,4)]
dim(A)
```

# Loading Data
```{r}
Auto=read.csv("Auto.csv",header=T,na.strings="?")
dim(Auto)
Auto[1:4,]
#na.omit returns the object with incomplete cases removed.
Auto=na.omit(Auto)
dim(Auto)
names(Auto)
```


#Additional Graphical and Numerical Summaries
```{r}
plot(Auto$cylinders, Auto$mpg)
#After that, objects can be accessed by simply their names.
attach(Auto)
plot(cylinders, mpg)
cylinders=as.factor(cylinders)
plot(cylinders, mpg)
plot(cylinders, mpg, col="red")
# Set varwidth=TRUE when you want to make widths of box proportional to the square root of the sample sizes. Set horizontal=TRUE to reverse the axis orientation.
plot(cylinders, mpg, col="red", varwidth=T)
plot(cylinders, mpg, col="red", varwidth=T,horizontal=T)
plot(cylinders, mpg, col="red", varwidth=T, xlab="cylinders", ylab="MPG")
hist(mpg)
hist(mpg,col=2)
hist(mpg,col=2,breaks=15)
pairs(Auto)
# only several variable selected
pairs(~ mpg + displacement + horsepower + weight + acceleration, Auto)
summary(Auto)
summary(mpg)
```

## Writing Functions
```{r}
my_func<-function(x,y){
 return(x+y)
 }
```

```{r}
my_func(1,2)
```

## library

```{r}
library(MASS)
library(ISLR)
```

#Example Code (Lecture 1)

#Overfitting Problem
```{r training vs test}
set.seed(3)
x<-c(1:20)
y<-runif(max(x))
z<-runif(max(x))
par(mfrow=c(1,2))

#training dataset
plot(x,y,col='red',ylim=c(0,1),xlab='x',ylab='y',main='training')
abline(mean(y),0)
lines(spline(x, y, n = 201))

#testing dataset
plot(x,z,col='blue',ylim=c(0,1),xlab='x',ylab='y',main='testing')
abline(mean(y),0)
lines(spline(x, y, n = 201))
```

#Basic Distributions
```{r t distribution}
x <- seq(-4, 4, length=200)

#normal distrubution
hx <- dnorm(x)
degf <- c(3, 5, 8, 30)
colors <- c("red", "blue", "darkgreen", "gold", "black")
labels <- c("n=3", "n=5", "n=8", "n=30", "normal")

#t distribution
plot(x, hx, type="l", lty=2, xlab="x value",ylab="density", main="PDFs of t distributions")
for (i in 1:4){
  lines(x, dt(x,degf[i]), lwd=1, col=colors[i])
}
legend("topright", inset=.05, title="degrees of freedom",labels, lwd=1, lty=c(1, 1, 1, 1, 2), col=colors, box.lty=0)
```

```{r f distribution}
x <- seq(0.01, 4, length=200)

#degree of freedom
degf1 <- c(1,3,5,1,3,5,1,3,5)
degf2 <- c(5,5,5,10,10,10,50,50,50)

colors <- c("red","red","red","blue","blue","blue","black","black","black")
labels <- c("k=1, m=5", "k=3, m=5", "k=5, m=5", "k=1, m=10", "k=3, m=10", "k=5, m=10", "k=1, m=30", "k=3, m=30", "k=5, m=30")
plot(x, df(x,degf1[1],degf2[1]), col=colors[1],type="l", lwd=1,xlab="x value",ylab="density", main="PDFs of F distributions",ylim=c(0,1.0))
for (i in 2:9){
  lines(x, df(x,degf1[i],degf2[i]), lwd=1, col=colors[i])
}
legend("topright", inset=.05, title="degrees of freedom",labels, lwd=1, lty=c(1, 1, 1, 1, 1, 1, 1, 1, 1), col=colors, box.lty=0)
```

#Example: Advertising (Basic Analysis)
```{r scatterplot}
#read Advertising dataset
library(ISLR)
#download from http://faculty.marshall.usc.edu/gareth-james/ISL/data.html/
adv = read.csv("Advertising.csv",header=T,na.string=",")

#single scatterplot TV vs. sales
plot(adv$TV,adv$sales,xlab="TV",ylab="sales",col="red")
```

```{r scatterplot matrix}
#correlation between variables
cor(adv[,2:4])
#scatter matrix of paired variables
plot(adv[c(2,3,4,5)], col="red")
```

```{r linear}
#simple linear function
lm1<-lm(adv$sales~adv$TV)
sales_Predict<-predict(lm1)
#scatterplot TV vs. sales
plot(adv$TV,adv$sales,xlab="TV",ylab="sales",col="red",pch=20)
segments(adv$TV, adv$sales, adv$TV, sales_Predict)
abline(lm1,col="blue",lwd=2)
```
```{r}
#multiple linear regression
lm2<-lm(adv$sales~adv$TV+adv$radio+adv$newspaper)
summary(lm2)
coef(lm2)
confint(lm2)
par(mfrow=c(2,2))
plot(lm2)
```

```{r effect of different parts of the dataset}

#the first 100 data
lm1a<-lm(adv$sales[1:100]~adv$TV[1:100])
#summary(lm1a)

#the following 100 data
lm1b<-lm(adv$sales[101:200]~adv$TV[101:200])
#summary(lm1b)
par(mfrow=c(1,2))
plot(adv$TV[1:100],adv$sales[1:100],xlab="TV",ylab="sales",col="red",ylim=c(0,30))
abline(lm(adv$sales[1:100]~adv$TV[1:100]),col="blue",lwd=2)
plot(adv$TV[101:200],adv$sales[101:200],xlab="TV",ylab="sales",col="red",ylim=c(0,30))
abline(lm(adv$sales[101:200]~adv$TV[101:200]),col="blue",lwd=2)
```

#Example: Auto (Basic Analysis)
```{r}
auto = Auto
auto$horsepower = as.integer(auto$horsepower)
lm7a <- lm(mpg~horsepower,data=auto)
lm7b <- lm(mpg~horsepower+I(horsepower^2),data=auto)
lm7c <- lm(mpg~horsepower+I(horsepower^2)+I(horsepower^3)+I(horsepower^4)+I(horsepower^5),data=auto)
par(mfrow=c(1,2))
plot(auto$horsepower,auto$mpg,col="red",xlab = "horsepower",ylab = "mpg")
new <- data.frame(horsepower = seq(min(auto$horsepower,na.rm=TRUE),max(auto$horsepower,na.rm=TRUE),length=200))
lines(new$horsepower,predict(lm7a,newdata=new),col="blue",lwd=2)
plot(na.omit(auto$horsepower),lm7a$residuals,col="blue",xlab = "horsepower", ylab = "residuals",ylim=c(-16,16))
box()
```

```{r}
par(mfrow=c(1,2))
plot(auto$horsepower,auto$mpg,col="red",xlab = "horsepower",ylab = "mpg")
lines(new$horsepower,predict(lm7a,newdata=new),col="blue",lwd=2)
lines(new$horsepower,predict(lm7b,newdata=new),col="black",lwd=2)
lines(new$horsepower,predict(lm7c,newdata=new),col="darkgreen",lwd=2)
legend("topright", inset=.05,c("linear","quadratic","degree 5"), lwd=2, lty=c(1, 1, 1), col=c("blue","black","darkgreen"), box.lty=0)
plot(na.omit(auto$horsepower),lm7b$residuals,col="black",xlab = "horsepower", ylab = "residuals",ylim=c(-16,16))
box()
```
```{r}
plot(auto$horsepower,auto$mpg,col="red",xlab = "horsepower",ylab = "mpg")
lines(new$horsepower,predict(lm7a,newdata=new),col="blue",lwd=2)
lines(new$horsepower,predict(lm7b,newdata=new),col="black",lwd=2)
lines(new$horsepower,predict(lm7c,newdata=new),col="darkgreen",lwd=2)
legend("topright", inset=.05,c("linear","quadratic","degree 5"), lwd=2, lty=c(1, 1, 1), col=c("blue","black","darkgreen"), box.lty=0)
```

## KNN
```{r}
# install.packages('FNN')
library('FNN')
par(mfrow=c(1,2))
x<-seq(0,1,length=1000)
t2.data<-data.frame(x)
x<-runif(40)
y<-x+rnorm(40,0,0.25)
t1.data<-data.frame(x,y)
knn11<-knn.reg(train=t1.data$x,test=t2.data,t1.data$y,k=1)
knn110<-knn.reg(train=t1.data$x,test=t2.data,t1.data$y,k=10)
plot(x,y,col="red",main = "K=1")
legend("bottomright", inset=.05,c("true model","linear reg","K-NN reg"), lwd=2, lty=c(1, 1, 1), col=c("black","blue","dodgerblue"), box.lty=0)
lines(t2.data$x,knn11$pred,col="dodgerblue")
abline(0,1)
abline(lm(y~x),col="blue")
plot(x,y,col="red",main = "K=10")
legend("bottomright", inset=.05,c("true model","linear reg","K-NN reg"), lwd=2, lty=c(1, 1, 1), col=c("black","blue","dodgerblue"), box.lty=0)
lines(t2.data$x,knn110$pred,col="dodgerblue")
abline(0,1)
abline(lm(y~x),col="blue")
box()
```