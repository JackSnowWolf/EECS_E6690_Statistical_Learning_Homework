simple_lm$coefficients[1]
simple_lm$coefficients[2]
help("data.frame")
x_2 = x^2
scatter_fig2 <- scatter_fig + geom_abline(method="lm")
scatter_fig2 <- scatter_fig + geom_abline(intercept = simple_lm$coefficients[1], slope = simple_lm$coefficients[2], color="red",
linetype="dashed", size=1.5)
scatter_fig2
scatter_fig2 <- scatter_fig + geom_abline(intercept = simple_lm$coefficients[1], slope = simple_lm$coefficients[2], color="red",
linetype="dashed", size=1.5) +
geom_smooth(method = "loess", color="blue",
linetype="dashed", size=1.5)
scatter_fig2
set.seed(1)
x = rnorm(100)
eps = rnorm(100, mean = 0, sd = 0.25)
y = -1 + 0.5*x + eps
library(ggplot2)
scatter_fig <- ggplot(,aes(x=x, y=y)) + geom_point()
scatter_fig
simple_lm <-lm(y~x)
summary(simple_lm)
scatter_fig2 <- scatter_fig + geom_abline(intercept = simple_lm$coefficients[1], slope = simple_lm$coefficients[2], color="red",
linetype="dashed", size=1.5) +
geom_smooth(method = "loess", color="blue",
linetype="dashed", size=1.5)
scatter_fig2
scatter_fig2 <- scatter_fig + geom_abline(intercept = simple_lm$coefficients[1], slope = simple_lm$coefficients[2], color="red",
linetype="dashed", size=1.5, se = FALSE) +
geom_smooth(method = "loess", color="blue",
linetype="dashed", size=1.5)
scatter_fig2
scatter_fig2 <- scatter_fig + geom_abline(intercept = simple_lm$coefficients[1], slope = simple_lm$coefficients[2], color="red",
linetype="dashed", size=1.5) +
geom_smooth(method = "loess", color="blue",
linetype="dashed", size=1.5, se = FALSE)
scatter_fig2
scatter_fig2 <- scatter_fig + geom_abline(intercept = simple_lm$coefficients[1], slope = simple_lm$coefficients[2], color="red",
linetype="dashed", size=1.5) +
geom_smooth(method = "loess", color="blue",
linetype="dashed", size=1.5, se = FALSE) +
scale_color_identity(labels=c("central","limits"), guide="legend")
scatter_fig2
scatter_fig2 <- scatter_fig + geom_abline(intercept = simple_lm$coefficients[1], slope = simple_lm$coefficients[2], color="red",
linetype="dashed", size=1.5, colour="least squares line") +
geom_smooth(method = "loess", color="blue",
linetype="dashed", size=1.5, se = FALSE, colour="population regression line") +
scale_color_identity(labels=c("least squares line","population regression line"), guide="legend")
scatter_fig2
help("theme")
scatter_fig2 <- scatter_fig + geom_abline(intercept = simple_lm$coefficients[1], slope = simple_lm$coefficients[2], color="red",
linetype="dashed", size=1.5, colour="least squares line") +
geom_smooth(method = "loess", color="blue",
linetype="dashed", size=1.5, se = FALSE, colour="population regression line") +
theme(legend.position="right")
scatter_fig2
scatter_fig2 <- scatter_fig + geom_abline(intercept = simple_lm$coefficients[1], slope = simple_lm$coefficients[2],
linetype="dashed", size=1.5, colour="least squares line") +
geom_smooth(method = "loess",
linetype="dashed", size=1.5, se = FALSE, colour="population regression line") +
theme(legend.position="right")
scatter_fig2
scatter_fig2 <- scatter_fig + geom_abline(intercept = simple_lm$coefficients[1], slope = simple_lm$coefficients[2],
linetype="dashed", size=1.5, colour="least squares line") +
geom_smooth(method = "loess",
linetype="dashed", size=1.5, se = FALSE, colour="population regression line") +
scale_colour_manual(values=c("red", "blue"))+
theme(legend.position="right")
scatter_fig2
scatter_fig2 <- scatter_fig + geom_abline(intercept = simple_lm$coefficients[1], slope = simple_lm$coefficients[2],
linetype="dashed", size=1.5, colour="least squares line") +
geom_smooth(method = "loess",
linetype="dashed", size=1.5, se = FALSE, colour="population regression line") +
scale_colour_manual(values=c("red", "blue"))+
theme(legend.position="right")
scatter_fig2
scatter_fig2 <- scatter_fig + geom_abline(intercept = simple_lm$coefficients[1], slope = simple_lm$coefficients[2],
linetype="dashed", size=1.5, colour="least squares line") +
geom_smooth(method = "loess",
linetype="dashed", size=1.5, se = FALSE, colour="population regression line") +
scale_colour_manual(values=c("red", "blue"))+
theme(legend.position="right")
scatter_fig2
scatter_fig2 <- scatter_fig + geom_abline(intercept = simple_lm$coefficients[1], slope = simple_lm$coefficients[2],
linetype="dashed", size=1.5, colour="least squares line") +
geom_smooth(method = "loess",
linetype="dashed", size=1.5, se = FALSE, colour="population regression line") +
scale_colour_manual(values=c("red", "blue"))+
theme(legend.position="right")
scatter_fig2
scatter_fig2 <- scatter_fig + geom_abline(intercept = simple_lm$coefficients[1], slope = simple_lm$coefficients[2],
linetype="dashed", size=1.5, colour="least squares line") +
geom_smooth(method = "loess",
linetype="dashed", size=1.5, se = FALSE, colour="population regression line") +
scale_colour_manual(values=c("red", "blue"))+
theme(legend.position="right")
scatter_fig2
scatter_fig2 <- scatter_fig + geom_abline(intercept = simple_lm$coefficients[1], slope = simple_lm$coefficients[2],
linetype="dashed", size=1.5, colour="least squares line") +
geom_smooth(method = "loess",
linetype="dashed", size=1.5, se = FALSE, colour="population regression line") +
scale_colour_manual(values=c("red", "blue"))+
theme(legend.position="right")
scatter_fig2
scatter_fig2 <- scatter_fig + geom_abline(intercept = simple_lm$coefficients[1], slope = simple_lm$coefficients[2], aes(color = "red"),
linetype="dashed", size=1.5, se = FALSE) +
geom_smooth(method = "loess", aes(color = "blue"),
linetype="dashed", size=1.5) +
scale_colour_manual(name='Lines', values=c("Regression", "Abline"))
scatter_fig2
scatter_fig2 <- scatter_fig + geom_abline(intercept = simple_lm$coefficients[1], slope = simple_lm$coefficients[2], aes(color = "red"),
linetype="dashed", size=1.5, se = FALSE) +
geom_smooth(method = "loess", aes(color = "blue"),
linetype="dashed", size=1.5) +
scale_colour_manual(name='Lines', labels = c("population regression", "least squares"),
values=c("blue", "red"))
scatter_fig2
scatter_fig2 <- scatter_fig + geom_abline( aes(intercept = simple_lm$coefficients[1], slope = simple_lm$coefficients[2],color = "red"),
linetype="dashed", size=1.5, se = FALSE) +
geom_smooth(method = "loess", aes(color = "blue"),
linetype="dashed", size=1.5) +
scale_colour_manual(name='Lines', labels = c("population regression", "least squares"),
values=c("blue", "red"))
scatter_fig2
scatter_fig2 <- scatter_fig + geom_abline( aes(intercept = simple_lm$coefficients[1], slope = simple_lm$coefficients[2],color = "red", se = FALSE),
linetype="dashed", size=1.5) +
geom_smooth(method = "loess", aes(color = "blue"),
linetype="dashed", size=1.5) +
scale_colour_manual(name='Lines', labels = c("population regression", "least squares"),
values=c("blue", "red"))
scatter_fig2
scatter_fig2 <- scatter_fig + geom_abline( aes(intercept = simple_lm$coefficients[1], slope = simple_lm$coefficients[2],color = "red"),
linetype="dashed", size=1.5) +
geom_smooth(method = "loess", aes(color = "blue"),
linetype="dashed", size=1.5, se = FALSE) +
scale_colour_manual(name='Lines', labels = c("population regression", "least squares"),
values=c("blue", "red"))
scatter_fig2
scatter_fig2 <- scatter_fig + geom_abline( aes(intercept = simple_lm$coefficients[1], slope = simple_lm$coefficients[2],color = "red"),
linetype="dashed", size=1.5) +
geom_smooth(method = "loess", aes(color = "blue"),
linetype="dashed", size=1.5, se = FALSE) +
scale_colour_manual(name='Lines', labels = c("population regression", "least squares"),
values=c("blue", "red"))
scatter_fig2
quadratic_lm <- lm(y ~ x + x^2)
summary(quadratic_lm)
quadratic_lm <- lm(y ~ x + I(x^2))
summary(quadratic_lm)
quadratic_lm <- lm(y ~ x + I(x^2))
summary(quadratic_lm)
x = rnorm(100)
eps = rnorm(100, mean = 0, sd = 0.1)
y = -1 + 0.5*x + eps
library(ggplot2)
scatter_fig <- ggplot(,aes(x=x, y=y)) + geom_point()
scatter_fig
simple_lm <-lm(y~x)
summary(simple_lm)
scatter_fig2 <- scatter_fig + geom_abline( aes(intercept = simple_lm$coefficients[1],
slope = simple_lm$coefficients[2],color = "red"),
linetype="dashed", size=1.5) +
geom_smooth(method = "loess", aes(color = "blue"),
linetype="dashed", size=1.5, se = FALSE) +
scale_colour_manual(name='Lines', labels = c("population regression", "least squares"),
values=c("blue", "red"))
scatter_fig2
simple_more_lm <-lm(y~x)
summary(simple_more_lm)
x = rnorm(100)
eps = rnorm(100, mean = 0, sd = 1)
y = -1 + 0.5*x + eps
library(ggplot2)
scatter_fig <- ggplot(,aes(x=x, y=y)) + geom_point()
scatter_fig
simple_more_lm <-lm(y~x)
summary(simple_more_lm)
scatter_fig2 <- scatter_fig + geom_abline( aes(intercept = simple_more_lm$coefficients[1],
slope = simple_more_lm$coefficients[2],color = "red"),
linetype="dashed", size=1.5) +
geom_smooth(method = "loess", aes(color = "blue"),
linetype="dashed", size=1.5, se = FALSE) +
scale_colour_manual(name='Lines', labels = c("population regression", "least squares"),
values=c("blue", "red"))
scatter_fig2
print("Confidence Interval for ")
confint(simple_lm , "(Intercept)", level = 0.95)
printf("Confidence Interval for ")
print("Confidence Interval for ")
confint(simple_lm , "(Intercept)", level = 0.95)
print("Confidence Interval for original data set")
confint(simple_lm , "(Intercept)", level = 0.95)
confint(simple_lm , "distance", level = 0.95)
print("Confidence Interval for noisier data set")
confint(simple_less_lm , "(Intercept)", level = 0.95)
x = rnorm(100)
eps = rnorm(100, mean = 0, sd = 0.1)
y = -1 + 0.5*x + eps
library(ggplot2)
scatter_fig <- ggplot(,aes(x=x, y=y)) + geom_point()
scatter_fig
simple_less_lm <-lm(y~x)
summary(simple_less_lm)
print("Confidence Interval for original data set")
confint(simple_lm , "(Intercept)", level = 0.95)
confint(simple_lm , "distance", level = 0.95)
print("Confidence Interval for noisier data set")
confint(simple_less_lm , "(Intercept)", level = 0.95)
confint(simple_less_lm , "distance", level = 0.95)
print("Confidence Interval for less noisy  data set")
confint(simple_more_lm , "(Intercept)", level = 0.95)
confint(simple_more_lm , "distance", level = 0.95)
print("Confidence Interval for original data set")
confint(simple_lm , "(Intercept)", level = 0.95)
confint(simple_lm , "x", level = 0.95)
print("Confidence Interval for noisier data set")
confint(simple_less_lm , "(Intercept)", level = 0.95)
confint(simple_less_lm , "x", level = 0.95)
print("Confidence Interval for less noisy  data set")
confint(simple_more_lm , "(Intercept)", level = 0.95)
confint(simple_more_lm , "x", level = 0.95)
print("Confidence Interval for original data set")
confint(simple_lm , c("(Intercept)", "x"), level = 0.95)
confint(simple_lm , "x", level = 0.95)
print("Confidence Interval for noisier data set")
confint(simple_less_lm , "(Intercept)", level = 0.95)
confint(simple_less_lm , "x", level = 0.95)
print("Confidence Interval for less noisy  data set")
confint(simple_more_lm , "(Intercept)", level = 0.95)
confint(simple_more_lm , "x", level = 0.95)
print("Confidence Interval for original data set")
confint(simple_lm , c("(Intercept)", "x"), level = 0.95)
print("Confidence Interval for noisier data set")
confint(simple_less_lm , c("(Intercept)", "x"), level = 0.95)
print("Confidence Interval for less noisy  data set")
confint(simple_more_lm , c("(Intercept)", "x"), level = 0.95)
print("Confidence Interval for original data set")
confint(simple_lm , c("(Intercept)", "x"), level = 0.95)
print("Confidence Interval for less noisy data set")
confint(simple_less_lm , c("(Intercept)", "x"), level = 0.95)
print("Confidence Interval for noisier data set")
confint(simple_more_lm , c("(Intercept)", "x"), level = 0.95)
#read Advertising dataset
library(ISLR)
#download from http://faculty.marshall.usc.edu/gareth-james/ISL/data.html/
adv = read.csv("Advertising.csv",header=T,na.string=",")
#read Advertising dataset
library(ISLR)
#download from http://faculty.marshall.usc.edu/gareth-james/ISL/data.html/
adv = read.csv("Advertising.csv",header=T,na.string=",")
#single scatterplot TV vs. sales
plot(adv$TV,adv$sales,xlab="TV",ylab="sales",col="red")
adv.df = read.csv("Advertising.csv",header=T,na.string=",")
View(adv.df)
adv.df = read.csv("Advertising.csv",header=T,na.string=",")
TV.lm <- lm(Sales ~ TV, data = adv.df)
adv.df = read.csv("Advertising.csv",header=T,na.string=",")
TV.lm <- lm(sales ~ TV, data = adv.df)
adv.df = read.csv("Advertising.csv",header=T,na.string=",")
TV.lm <- lm(sales ~ TV, data = adv.df)
radio.lm <- lm(sales ~ radio, data = adv.df)
newspaper.lm <- lm(sales ~ newspaper, data = adv.df)
View(radio.lm)
adv.df = read.csv("Advertising.csv",header=T,na.string=",")
TV.lm <- lm(sales ~ TV, data = adv.df)
radio.lm <- lm(sales ~ radio, data = adv.df)
newspaper.lm <- lm(sales ~ newspaper, data = adv.df)
# "Confidence Interval for sales ~ TV"
confint(TV.lm , c("(Intercept)", "TV"), level = 0.92)
# "Confidence Interval for sales ~ radio"
confint(radio.lm , c("(Intercept)", "radio"), level = 0.92)
# "Confidence Interval for sales ~ newspaper"
confint(newspaper.lm , c("(Intercept)", "newspaper"), level = 0.92)
plot(TV, sales, data = adv.df, xlab="TV",ylab="sales",col="red",pch=20)
plot(adv.df$TV, adv.df$sales, xlab="TV",ylab="sales",col="red",pch=20)
plot(adv.df$TV, adv.df$sales, xlab="TV",ylab="sales",col="red",pch=20)
plot(adv.df$TV, adv.df$sales, xlab="TV",ylab="sales",col="red",pch=20)
plot(adv.df$TV, adv.df$sales, xlab="TV",ylab="sales",col="red",pch=20)
plot(adv.df$TV, adv.df$sales, xlab="TV",ylab="sales",pch=20)
new_TV <- seq(min(df$TV), max(df$TV), length.out=100)
new_TV <- seq(min(df$TV), max(df$TV), length.out=100)
min(df$TV)
plot(adv.df$TV, adv.df$sales, xlab="TV",ylab="sales",pch=20)
new_TV <- seq(min(adv.df$TV), max(adv.df$TV), length.out=100)
preds <- predict(TV.lm, newdata = data.frame(x=new_TV),
interval = 'confidence', level = 0.92)
plot(adv.df$TV, adv.df$sales, xlab="TV",ylab="sales",pch=20)
new_TV <- seq(min(adv.df$TV), max(adv.df$TV), length.out=100)
preds <- predict(TV.lm, newdata = data.frame(TV=new_TV),
interval = 'confidence', level = 0.92)
plot(adv.df$TV, adv.df$sales, xlab="TV",ylab="sales",pch=20)
new_TV <- seq(min(adv.df$TV), max(adv.df$TV), length.out=100)
preds <- predict(TV.lm, newdata = data.frame(TV=new_TV),
interval = 'confidence', level = 0.92)
polygon(c(rev(new_TV), new_TV), c(rev(preds[ ,3]), preds[ ,2]), col = 'grey80', border = NA)
# intervals
lines(new_TV, new_TV[ ,3], lty = 'dashed', col = 'red')
plot(adv.df$TV, adv.df$sales, xlab="TV",ylab="sales",pch=20)
new_TV <- seq(min(adv.df$TV), max(adv.df$TV), length.out=100)
preds <- predict(TV.lm, newdata = data.frame(TV=new_TV),
interval = 'confidence', level = 0.92)
polygon(c(rev(new_TV), new_TV), c(rev(preds[ ,3]), preds[ ,2]), col = 'grey80', border = NA)
# intervals
lines(new_TV, preds[ ,3], lty = 'dashed', col = 'red')
lines(new_TV, preds[ ,2], lty = 'dashed', col = 'red')
plot(adv.df$TV, adv.df$sales, xlab="TV",ylab="sales",pch=20)
new_TV <- seq(min(adv.df$TV), max(adv.df$TV), length.out=100)
preds <- predict(TV.lm, newdata = data.frame(TV=new_TV),
interval = 'confidence', level = 0.92)
polygon(c(rev(new_TV), new_TV), c(rev(preds[ ,3]), preds[ ,2]), col = 'grey80', border = NA)
abline(TV.lm)
# intervals
lines(new_TV, preds[ ,3], lty = 'dashed', col = 'red')
lines(new_TV, preds[ ,2], lty = 'dashed', col = 'red')
plot(adv.df$TV, adv.df$sales, xlab="TV",ylab="sales",pch=20)
new_TV <- seq(min(adv.df$TV), max(adv.df$TV), length.out=100)
preds <- predict(TV.lm, newdata = data.frame(TV=new_TV),
interval = 'confidence', level = 0.92)
polygon(c(rev(new_TV), new_TV), c(rev(preds[ ,3]), preds[ ,2]), col = 'grey80', border = NA)
abline(TV.lm, col = 'blue')
# intervals
lines(new_TV, preds[ ,3], lty = 'dashed', col = 'red')
lines(new_TV, preds[ ,2], lty = 'dashed', col = 'red')
summary(TV.lm)
plot(adv.df$radio, adv.df$sales, xlab="radio", ylab="sales", pch=20)
new_radio <- seq(min(adv.df$radio), max(adv.df$radio), length.out=100)
preds <- predict(radio.lm, newdata = data.frame(radio=new_radio),
interval = 'confidence', level = 0.92)
polygon(c(rev(new_radio), new_radio), c(rev(preds[ ,3]), preds[ ,2]), col = 'grey80', border = NA)
abline(radio.lm, col = 'blue')
# intervals
lines(new_radio, preds[ ,3], lty = 'dashed', col = 'red')
lines(new_radio, preds[ ,2], lty = 'dashed', col = 'red')
plot(adv.df$TV, adv.df$sales, xlab="TV", ylab="sales", pch=20)
new_TV <- seq(min(adv.df$TV), max(adv.df$TV), length.out=100)
preds <- predict(TV.lm, newdata = data.frame(TV=new_TV),
interval = 'confidence', level = 0.92)
polygon(c(rev(new_TV), new_TV), c(rev(preds[ ,3]), preds[ ,2]), col = 'grey80', border = NA)
abline(TV.lm, col = 'blue')
# intervals
lines(new_TV, preds[ ,3], lty = 'dashed', col = 'red')
lines(new_TV, preds[ ,2], lty = 'dashed', col = 'red')
plot(adv.df$radio, adv.df$sales, xlab="radio", ylab="sales", pch=20)
new_radio <- seq(min(adv.df$radio), max(adv.df$radio), length.out=100)
preds <- predict(radio.lm, newdata = data.frame(radio=new_radio),
interval = 'confidence', level = 0.08)
polygon(c(rev(new_radio), new_radio), c(rev(preds[ ,3]), preds[ ,2]), col = 'grey80', border = NA)
abline(radio.lm, col = 'blue')
# intervals
lines(new_radio, preds[ ,3], lty = 'dashed', col = 'red')
lines(new_radio, preds[ ,2], lty = 'dashed', col = 'red')
plot(adv.df$radio, adv.df$sales, xlab="radio", ylab="sales", pch=20)
new_radio <- seq(min(adv.df$radio), max(adv.df$radio), length.out=100)
preds <- predict(radio.lm, newdata = data.frame(radio=new_radio),
interval = 'confidence', level = 0.95)
polygon(c(rev(new_radio), new_radio), c(rev(preds[ ,3]), preds[ ,2]), col = 'grey80', border = NA)
abline(radio.lm, col = 'blue')
# intervals
lines(new_radio, preds[ ,3], lty = 'dashed', col = 'red')
lines(new_radio, preds[ ,2], lty = 'dashed', col = 'red')
plot(adv.df$radio, adv.df$sales, xlab="radio", ylab="sales", pch=20)
new_radio <- seq(min(adv.df$radio), max(adv.df$radio), length.out=100)
preds <- predict(radio.lm, newdata = data.frame(radio=new_radio),
interval = 'confidence', level = 0.99)
polygon(c(rev(new_radio), new_radio), c(rev(preds[ ,3]), preds[ ,2]), col = 'grey80', border = NA)
abline(radio.lm, col = 'blue')
# intervals
lines(new_radio, preds[ ,3], lty = 'dashed', col = 'red')
lines(new_radio, preds[ ,2], lty = 'dashed', col = 'red')
plot(adv.df$radio, adv.df$sales, xlab="radio", ylab="sales", pch=20)
new_radio <- seq(min(adv.df$radio), max(adv.df$radio), length.out=100)
preds <- predict(radio.lm, newdata = data.frame(radio=new_radio),
interval = 'confidence', level = 0.95)
polygon(c(rev(new_radio), new_radio), c(rev(preds[ ,3]), preds[ ,2]), col = 'grey80', border = NA)
abline(radio.lm, col = 'blue')
# intervals
lines(new_radio, preds[ ,3], lty = 'dashed', col = 'red')
lines(new_radio, preds[ ,2], lty = 'dashed', col = 'red')
summary(radio.lm)
plot(adv.df$newspaper, adv.df$sales, xlab="newspaper", ylab="sales", pch=20)
new_newspaper <- seq(min(adv.df$newspaper), max(adv.df$newspaper), length.out=100)
preds <- predict(radio.lm, newdata = data.frame(newspaper=new_newspaper),
interval = 'confidence', level = 0.95)
plot(adv.df$newspaper, adv.df$sales, xlab="newspaper", ylab="sales", pch=20)
new_newspaper <- seq(min(adv.df$newspaper), max(adv.df$newspaper), length.out=100)
preds <- predict(newspaper.lm, newdata = data.frame(newspaper=new_newspaper),
interval = 'confidence', level = 0.95)
polygon(c(rev(newspaper), newspaper), c(rev(preds[ ,3]), preds[ ,2]), col = 'grey80', border = NA)
plot(adv.df$newspaper, adv.df$sales, xlab="newspaper", ylab="sales", pch=20)
new_newspaper <- seq(min(adv.df$newspaper), max(adv.df$newspaper), length.out=100)
preds <- predict(newspaper.lm, newdata = data.frame(newspaper=new_newspaper),
interval = 'confidence', level = 0.95)
polygon(c(rev(new_newspaper), new_newspaper), c(rev(preds[ ,3]), preds[ ,2]), col = 'grey80', border = NA)
abline(newspaper.lm, col = 'blue')
# intervals
lines(new_newspaper, preds[ ,3], lty = 'dashed', col = 'red')
lines(new_newspaper, preds[ ,2], lty = 'dashed', col = 'red')
plot(adv.df$newspaper, adv.df$sales, xlab="newspaper", ylab="sales", pch=20)
new_newspaper <- seq(min(adv.df$newspaper), max(adv.df$newspaper), length.out=100)
preds <- predict(newspaper.lm, newdata = data.frame(newspaper=new_newspaper),
interval = 'confidence', level = 0.92)
polygon(c(rev(new_newspaper), new_newspaper), c(rev(preds[ ,3]), preds[ ,2]), col = 'grey80', border = NA)
abline(newspaper.lm, col = 'blue')
# intervals
lines(new_newspaper, preds[ ,3], lty = 'dashed', col = 'red')
lines(new_newspaper, preds[ ,2], lty = 'dashed', col = 'red')
plot(adv.df$radio, adv.df$sales, xlab="radio", ylab="sales", pch=20)
new_radio <- seq(min(adv.df$radio), max(adv.df$radio), length.out=100)
preds <- predict(radio.lm, newdata = data.frame(radio=new_radio),
interval = 'confidence', level = 0.95)
polygon(c(rev(new_radio), new_radio), c(rev(preds[ ,3]), preds[ ,2]), col = 'grey80', border = NA)
abline(radio.lm, col = 'blue')
# intervals
lines(new_radio, preds[ ,3], lty = 'dashed', col = 'red')
lines(new_radio, preds[ ,2], lty = 'dashed', col = 'red')
Auto=read.csv("Auto.csv",header=T,na.strings="?")
Auto=read.csv("Auto.csv", header=T, na.strings="?")
Auto.df=read.csv("Auto.csv", header=T, na.strings="?")
df <- na.omit(Auto.df)
ggpairs(Auto.df, columns=1:5, aes(color=Species)) +
ggtitle("Anderson's Iris Data -- 3 species")
library(ggplot2)
ggpairs(Auto.df, columns=1:5, aes(color=Species)) +
ggtitle("Anderson's Iris Data -- 3 species")
pairs(iris[,1:9])
pairs(Auto.df[,1:9])
library(GGally)
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
knitr::opts_chunk$set(echo = TRUE)
library(GGally)
ggpairs(Auto.df, columns=1:9, aes(color=Species)) +
ggtitle("Auto data set scatterplot matrix")
Auto.df <- read.csv("Auto.csv", header=T, na.strings="?")
Auto.df <- na.omit(Auto.df)
library(GGally)
ggpairs(Auto.df, columns=1:9) +
ggtitle("Auto data set scatterplot matrix")
Auto.df[, 1:9]
library(GGally)
ggpairs(Auto.df, columns=1:8) +
ggtitle("Auto data set scatterplot matrix")
pairs(Auto.df[,1:9])
help("cor")
cor(Auto[,1:8])
summary(Auto.df$horsepower)
cor(Auto.df[,1:8])
Auto.lm <- lm(mpg ~ cylinders + displacement + horsepower + weight + acceleration + year + origin,  data = Auto.df)
summary(Auto.lm)
pairs(Auto.df[,1:9])
Auto1.lm <- lm(mpg ~ cylinders + displacement + sqrt(horsepower) + weight + acceleration + year + origin,  data = Auto.df)
summary(Auto.lm)
Auto1.lm <- lm(mpg ~ cylinders + displacement + sqrt(horsepower) + weight + acceleration + year + origin,  data = Auto.df)
summary(Auto1.lm)
knitr::opts_chunk$set(echo = TRUE)
x = rnorm(100)
eps = rnorm(100, mean = 0, sd = 0.1)
y = -1 + 0.5*x + eps
x = rnorm(100)
eps = rnorm(100, mean = 0, sd = 0.1)
y = -1 + 0.5*x + eps
knitr::opts_chunk$set(echo = TRUE)
Auto2.lm <- lm(mpg ~ cylinders + displacement + sqrt(horsepower) + weight + log(acceleration) + year + origin,  data = Auto.df)
summary(Auto2.lm)
Auto3.lm <- lm(mpg ~ displacement + sqrt(horsepower) + weight + log(acceleration) + year + origin,  data = Auto.df)
summary(Auto3.lm)
Auto3.lm <- lm(log(mpg) ~ displacement + sqrt(horsepower) + weight + log(acceleration) + year + origin,  data = Auto.df)
summary(Auto3.lm)
9356 + 20 * 7.04^2 + 30.10^2 * 5.196 - 2 * 7.04 * 398.2 - 2 * 30.10 * 216.6 + 2 * 7.04 * 30.10 * 8.55
(9356 + 20 * 7.04^2 + 30.10^2 * 5.196 - 2 * 7.04 * 398.2 - 2 * 30.10 * 216.6 + 2 * 7.04 * 30.10 * 8.55)/18
7.04 + 30.10/2
9356 - 20 * 398.2^2 / 20^2
1- 32.44236 / 1427.838
(8.95/6)/(11.62/(45-6-1))
qf(0.95, 6, 45-6-1)
f(4.878084, 6, 45-6-1)
pf(4.878084, 6, 45-6-1)
qf(0.05, 6, 45-6-1)
1-pf(4.878084, 6, 45-6-1)
knitr::opts_chunk$set(echo = TRUE)
Auto.df <- read.csv("Auto.csv", header=T, na.strings="?")
Auto.df <- na.omit(Auto.df)
pairs(Auto.df[,1:9])
cor(Auto.df[,1:8])
Auto.lm <- lm(mpg ~ cylinders + displacement + horsepower +
weight + acceleration + year + origin,  data = Auto.df)
summary(Auto.lm)
library("ElemStatLearn")
library(ElemStatLearn)
install.packages("ElemStatLearn")
install.packages("leaps")
install.packages("glmnet")
(2*216.6-8.522*398.2)/(20*5.196-8.552^2)
(20*216.6-8.522*398.2)/(20*5.196-8.552^2)
(20*216.6-8.522*398.2)/(20*5.196-8.552^2)
8.522*398.2/20
(20*216.6-8.552*398.2)/(20*5.196-8.552^2)
398.2/20 - 30.10053 * 8.552/20
(9356 + 20 * 7.039013^2 * 5.196- 2* 7.04*398.2-2*30.1*216.6+2*7.039013*30.1*8.552)
(9356 + 20 * 7.039013^2 +30.1^2 5.196- 2* 7.04*398.2-2*30.1*216.6+2*7.039013*30.1*8.552)
(9356 + 20 * 7.039013^2 +30.1^2* 5.196- 2* 7.04*398.2-2*30.1*216.6+2*7.039013*30.1*8.552)
(9356 + 20 * 7.039013^2 +30.1^2* 5.196- 2* 7.04*398.2-2*30.1*216.6+2*7.039013*30.1*8.552)/18
(9356 + 20 * 7.039013^2 +30.1^2* 5.196- 2* 7.04*398.2-2*30.1*216.6+2*7.039013*30.1*8.552)/20
(9356 + 20 * 7.039013^2 +30.1^2* 5.196- 2* 7.04*398.2-2*30.1*216.6+2*7.039013*30.1*8.552)/17
(9356 + 20 * 7.039013^2 +30.10053^2* 5.196- 2* 7.04*398.2-2*30.10053*216.6+2*7.039013*30.10053*8.552)/18
