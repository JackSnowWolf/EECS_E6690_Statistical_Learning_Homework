points(which.max(t.bwd.summary$adjr2), t.bwd.summary$adjr2[which.max(t.bwd.summary$adjr2)],
pch = 2, col = "red", lwd = 2)
coefficients(t.bwd, id = which.max(t.bwd.summary$adjr2))
install.packages(glmnet)
install.packages("glmnet")
library(glmnet)
x_mat <- model.matrix(y ~ poly(x, 10, raw = T), data = t.df)[, -1]
t.cv <-cv.glmnet(x_mat, y, alpha = 1)
t.cv$lambda
library(glmnet)
x_mat <- model.matrix(y ~ poly(x, 10, raw = T), data = t.df)[, -1]
t.cv <-cv.glmnet(x_mat, y, alpha = 1)
best.lambda = t.cv$lambda.min
best.lambda
t.cv$lambda.1se
coef(t.cv, t.cv$lambda.1se)
t.cv$lambda.min
coef(t.cv, t.cv$lambda.min)
plot(t.cv)
set.seed(1)
x = rnorm(100)
epsilon = rnorm(100)
beta_0 = 0.2
beta_1 = 0.6
beta_2 = -0.1
beta_3 = 0.1
y = beta_0 + beta_1 * x + beta_2 * x^2 + beta_3 * x^3
library(leaps)
t.df <- data.frame(y = y, x = x)
t.full<-regsubsets(y ~ poly(x, 10, raw = T), data=t.df, nvmax = 10)
t.summary = summary(t.full)
# find model for best Cp
which.min(t.summary$cp)
plot(t.summary$cp, xlab = "Subset Size", ylab = "Cp", col = "blue", pch = 2, type = "l")
points(which.min(t.summary$cp), t.summary$cp[which.min(t.summary$cp)],
pch = 2, col = "red", lwd = 2)
coefficients(t.full, id = which.min(t.summary$cp))
# find model for best BIC
which.min(t.summary$bic)
plot(t.summary$bic, xlab = "Subset Size", ylab = "BIC", col = "blue", pch = 2, type = "l")
points(which.min(t.summary$bic), t.summary$bic[which.min(t.summary$bic)],
pch = 2, col = "red", lwd = 2)
coefficients(t.full, id = which.min(t.summary$bic))
# find model for best Adjusted R
which.max(t.summary$adjr2)
plot(t.summary$adjr2, xlab = "Subset Size", ylab = "adj R2", col = "blue", pch = 2, type = "l")
points(which.max(t.summary$adjr2), t.summary$adjr2[which.max(t.summary$adjr2)],
pch = 2, col = "red", lwd = 2)
coefficients(t.full, id = which.max(t.summary$adjr2))
library(leaps)
t.fwd<-regsubsets(y ~ poly(x, 10, raw = T), data=t.df, nvmax = 10,
method = "forward")
t.bwd<-regsubsets(y ~ poly(x, 10, raw = T), data=t.df, nvmax = 10,
method = "backward")
t.fwd.summary = summary(t.fwd)
t.bwd.summary = summary(t.bwd)
# find model for best Cp
which.min(t.fwd.summary$cp)
plot(t.fwd.summary$cp, xlab = "Subset Size", ylab = "Cp", col = "blue", pch = 2, type = "l")
points(which.min(t.fwd.summary$cp), t.fwd.summary$cp[which.min(t.fwd.summary$cp)],
pch = 2, col = "red", lwd = 2)
coefficients(t.fwd, id = which.min(t.fwd.summary$cp))
# find model for best Cp
which.min(t.bwd.summary$cp)
plot(t.bwd.summary$cp, xlab = "Subset Size", ylab = "Cp", col = "blue", pch = 2, type = "l")
points(which.min(t.bwd.summary$cp), t.bwd.summary$cp[which.min(t.bwd.summary$cp)],
pch = 2, col = "red", lwd = 2)
coefficients(t.bwd, id = which.min(t.bwd.summary$cp))
# find model for best BIC
which.min(t.fwd.summary$bic)
plot(t.fwd.summary$bic, xlab = "Subset Size", ylab = "BIC", col = "blue", pch = 2, type = "l")
points(which.min(t.fwd.summary$bic), t.fwd.summary$bic[which.min(t.fwd.summary$bic)],
pch = 2, col = "red", lwd = 2)
coefficients(t.fwd, id = which.min(t.fwd.summary$bic))
# find model for best BIC
which.min(t.bwd.summary$bic)
plot(t.bwd.summary$bic, xlab = "Subset Size", ylab = "BIC", col = "blue", pch = 2, type = "l")
points(which.min(t.bwd.summary$bic), t.bwd.summary$bic[which.min(t.bwd.summary$bic)],
pch = 2, col = "red", lwd = 2)
coefficients(t.bwd, id = which.min(t.bwd.summary$bic))
# find model for best BIC
which.min(t.fwd.summary$bic)
plot(t.fwd.summary$bic, xlab = "Subset Size", ylab = "BIC", col = "blue", pch = 2, type = "l")
points(which.min(t.fwd.summary$bic), t.fwd.summary$bic[which.min(t.fwd.summary$bic)],
pch = 2, col = "red", lwd = 2)
coefficients(t.fwd, id = which.min(t.fwd.summary$bic))
# find model for best BIC
which.min(t.bwd.summary$bic)
plot(t.bwd.summary$bic, xlab = "Subset Size", ylab = "BIC", col = "blue", pch = 2, type = "l")
points(which.min(t.bwd.summary$bic), t.bwd.summary$bic[which.min(t.bwd.summary$bic)],
pch = 2, col = "red", lwd = 2)
coefficients(t.bwd, id = which.min(t.bwd.summary$bic))
# find model for best Adjusted R
which.max(t.fwd.summary$adjr2)
plot(t.fwd.summary$adjr2, xlab = "Subset Size", ylab = "adj R2", col = "blue", pch = 2, type = "l")
points(which.max(t.fwd.summary$adjr2), t.fwd.summary$adjr2[which.max(t.fwd.summary$adjr2)],
pch = 2, col = "red", lwd = 2)
coefficients(t.fwd, id = which.max(t.fwd.summary$adjr2))
# find model for best Adjusted R
which.max(t.bwd.summary$adjr2)
plot(t.bwd.summary$adjr2, xlab = "Subset Size", ylab = "adj R2", col = "blue", pch = 2, type = "l")
points(which.max(t.bwd.summary$adjr2), t.bwd.summary$adjr2[which.max(t.bwd.summary$adjr2)],
pch = 2, col = "red", lwd = 2)
coefficients(t.bwd, id = which.max(t.bwd.summary$adjr2))
beta_0 = 0.5
beta_7 = 0.3
y = beta_0 + beta_7 * x^7 + epsilon
t2.df <- data.frame(y = y, x = x)
t2.full<-regsubsets(y ~ poly(x, 10, raw = T), data=t2.df, nvmax = 10)
t2.summary = summary(t2.full)
beta_0 = 0.5
beta_7 = 0.3
y = beta_0 + beta_7 * x^7 + epsilon
t2.df <- data.frame(y = y, x = x)
t2.full<-regsubsets(y ~ poly(x, 10, raw = T), data=t2.df, nvmax = 10)
t2.summary = summary(t2.full)
which.min(t2.summary$cp)
which.min(t2.summary$bic)
which.max(t2.summary$adjr2)
which.min(t2.summary$cp)
coefficients(t2.summary, id = which.min(t2.summary$cp))
beta_0 = 0.5
beta_7 = 0.3
y = beta_0 + beta_7 * x^7 + epsilon
t2.df <- data.frame(y = y, x = x)
t2.full<-regsubsets(y ~ poly(x, 10, raw = T), data=t2.df, nvmax = 10)
t2.summary = summary(t2.full)
t2.summary
which.min(t2.summary$cp)
coefficients(t2.summary, id = which.min(t2.summary$cp))
which.min(t2.summary$cp)
coefficients(t2.full, id = which.min(t2.summary$cp))
which.min(t2.summary$bic)
coefficients(t2.full, id = which.min(t2.summary$bic))
which.max(t2.summary$adjr2)
coefficients(t2.full, id = which.min(t2.summary$adjr2))
beta_0 = 0.5
beta_7 = 0.3
y = beta_0 + beta_7 * x^7 + epsilon
t2.df <- data.frame(y = y, x = x)
t2.full<-regsubsets(y ~ poly(x, 10, raw = T), data=t2.df, nvmax = 10, method = "best")
help(regsubsets)
beta_0 = 0.5
beta_7 = 0.3
y = beta_0 + beta_7 * x^7 + epsilon
t2.df <- data.frame(y = y, x = x)
t2.full<-regsubsets(y ~ poly(x, 10, raw = T), data=t2.df, nvmax = 10)
t2.summary = summary(t2.full)
which.min(t2.summary$cp)
coefficients(t2.full, id = which.min(t2.summary$cp))
x_mat2 <- model.matrix(y ~ poly(x, 10, raw = T), data = t2.df)[, -1]
t2.cv <-cv.glmnet(x_mat2, y, alpha = 1)
plot(t2.cv)
t2.full.mod = glmnet(xmat, Y, alpha = 1)
t2.full.mod = glmnet(x_mat2, y, alpha = 1)
predict(t2.full.mod, s = t2.cv$lambda.min, type = "coefficients")
x_mat2 <- model.matrix(y ~ poly(x, 10, raw = T), data = t2.df)[, -1]
t2.cv <-cv.glmnet(x_mat2, y, alpha = 1)
t2.cv$lambda.min
t2.full.mod = glmnet(x_mat2, y, alpha = 1)
predict(t2.full.mod, s = t2.cv$lambda.min, type = "coefficients")
t2.full.mod = glmnet(x_mat2, y, alpha = 1)
predict(t2.full.mod, s = t2.cv$lambda.min, type = "coefficients")
t2.full.mod = glmnet(x_mat2, y, alpha = 1)
predict(t2.full.mod, s = t2.cv$lambda.min, type = "coefficients")
t2.full.mod = glmnet(x_mat2, y, alpha = 1)
predict(t2.full.mod, s = t2.cv$lambda.min, type = "coefficients")
t2.full.mod = glmnet(x_mat2, y, alpha = 1)
predict(t2.full.mod, s = t2.cv$lambda.min, type = "coefficients")
t2.full.mod = glmnet(x_mat2, y, alpha = 1)
predict(t2.full.mod, s = t2.cv$lambda.min, type = "coefficients")
t2.full.mod = glmnet(x_mat2, y, alpha = 1)
predict(t2.full.mod, s = t2.cv$lambda.min, type = "coefficients")
t2.full.mod = glmnet(x_mat2, y, alpha = 1)
predict(t2.full.mod, s = t2.cv$lambda.min, type = "coefficients")
which.min(t2.summary$bic)
coefficients(t2.full, id = which.min(t2.summary$bic))
library(ISLR)
College
library(ISLR)
# load College data set.
College.df <- College
library(ISLR)
# load College data set.
College.df <- College
sum(is.na(College))
library(ISLR)
# load College data set.
College.df <- read.csv("College.csv", header = T)
# check na
sum(is.na(College))
View(College.df)
View(College.df)
College.df <- College
College.df$X
College.df$x
library(ISLR)
# load College data set.
College.df <- read.csv("College.csv", header = T)
# check na
sum(is.na(College))
College.df <- read.csv("College.csv", header = T)
names(College.df)
names(College.df)[1]
set.seed (1)
train = sample(1: nrow(College.df), nrow(College.df)/2)
test = (-train)
College.test = College.df[, test]
College.train = College.df[, train]
set.seed (1)
train = sample(1: nrow(College.df), nrow(College.df)/2)
test = (-train)
College.test = College.df[test, ]
College.train = College.df[train, ]
View(College.test)
View(College.train)
set.seed (1)
train = sample(1: nrow(College.df), nrow(College.df)/2)
test = (-train)
College.test = College.df[test, ]
College.train = College.df[train, ]
View(College.test)
# load College data set.
College.df <- read.csv("College.csv", header = T, row.names=1)
# check na
sum(is.na(College))
View(College.df)
set.seed (1)
train = sample(1: nrow(College.df), nrow(College.df)/2)
test = (-train)
College.test = College.df[test, ]
College.train = College.df[train, ]
College.lm = lm(Apps~., data=College.train)
mean((College.test$Apps - predict(College.lm, data = Collega.test) )^2)
College.test$Apps - predict(College.lm, data = Collega.test)
length(College.test$Apps)
length(predict(College.lm, data = College.test))
predict(College.lm, data = College.test)
College.test
set.seed (1)
College.df <- College
train = sample(1: nrow(College.df), nrow(College.df)/2)
test = (-train)
College.test = College.df[test, ]
College.train = College.df[train, ]
View(College.test)
College.lm = lm(Apps~., data=College.train)
mean((College.test$Apps - predict(College.lm, data = Collega.test) )^2)
College.lm = lm(Apps~., data=College.train)
summary(College.lm)
College.lm = lm(Apps~., data=College.train)
mean((College.test$Apps - predict(College.lm, data = College.test) )^2)
(College.test$Apps - predict(College.lm, data = College.test)
)
set.seed (1)
train = sample(1: nrow(College.df), nrow(College.df)/2)
test = (-train)
College.test = College.df[test, ]
College.train = College.df[train, ]
College.lm = lm(Apps~., data=College.train)
mean((College.test$Apps - predict(College.lm, data = College.test) )^2)
predict(College.lm, data = College.test
)
pred = predict(College.lm, data = College.test)
length(pred)
College.test$Apps
length(College.test$Apps)
College.test[,"Apps"]
length(College.test[,"Apps"])
College.lm = lm(Apps~., data=College.train)
mean((College.test$Apps - predict(College.lm, College.test) )^2)
train_mat <- model.matrix(Apps ~ ., data = College.train)
test_mat <-  model.matrix(Apps ~ ., data = College.test)
College.ridge = cv.glmnet(train_mat, College.train$Apps, alpha = 0)
train_mat <- model.matrix(Apps ~ ., data = College.train)
test_mat <-  model.matrix(Apps ~ ., data = College.test)
College.ridge = cv.glmnet(train_mat, College.train$Apps, alpha = 0)
plot(College.ridge)
train_mat <- model.matrix(Apps ~ ., data = College.train)
test_mat <-  model.matrix(Apps ~ ., data = College.test)
College.ridge = cv.glmnet(train_mat, College.train$Apps, alpha = 0)
plot(College.ridge)
ridge.pred = predict(College.ridge, newx=test.mat, s=College.ridge$lambda.min)
ridge.pred = predict(College.ridge, newx=test_mat, s=College.ridge$lambda.min)
mean((College.test[, "Apps"] - ridge.pred)^2)
College.lasso = cv.glmnet(train_mat, College.train$Apps, alpha = 1)
plot(College.lasso)
College.lasso$lambda.min
coef(College.lasso, College.lasso$lambda.min )
lasso.pred = predict(College.lasso, newx=test_mat, s=College.lasso$lambda.min)
mean((College.test[, "Apps"] - lasso.pred)^2)
set.seed(1)
n = 1000
p = 20
X_mat =  matrix(rnorm(n * p), n, p)
Beta = rnorm(p)
Beta[3] = 0
Beta[5] = 0
Beta[7] = 0
Beta[13] = 0
Beta[17] = 0
epsilon = rnorm(n)
Beta * X_mat
summary(Beta * X_mat)
summary(X_mat * Beta)
length(X_mat * Beta)
length(X_mat %*% Beta)
set.seed(1)
n = 1000
p = 20
X_mat =  matrix(rnorm(n * p), n, p)
Beta = rnorm(p)
Beta[3] = 0
Beta[5] = 0
Beta[7] = 0
Beta[13] = 0
Beta[17] = 0
epsilon = rnorm(n)
Y = X_mat %*% Beta + epsilon
View(Y)
View(x_mat2)
View(x_mat)
View(X_mat)
train = sample(1: 1000, 100)
test = (-train)
set.seed(1)
n = 1000
p = 20
X_mat =  matrix(rnorm(n * p), n, p)
Beta = rnorm(p)
Beta[3] = 0
Beta[5] = 0
Beta[7] = 0
Beta[13] = 0
Beta[17] = 0
epsilon = rnorm(n)
Y = X_mat %*% Beta + epsilon
set.seed(1)
train = sample(1: 1000, 100)
test = (-train)
X_mat.train = X_mat[train, ]
X_mat.test = X_mat[test, ]
Y.train = Y[train, ]
Y.test = Y[test, ]
d.full = regsubsets(y ~ ., data = data.frame(x = X_mat.train, y = Y.train),
nvmax = p)
d.summary = summary(d.full)
plot(d.summary)
plot(d.full)
d.summary
d.full = regsubsets(y ~ ., data = data.frame(x = X_mat.train, y = Y.train),
nvmax = p)
d.summary = summary(d.full)
d.summary
x_cols = colnames(x, do.NULL = FALSE, prefix = "x.")
for(i in 1:p){
}
d.full = regsubsets(y ~ ., data = data.frame(x = X_mat.train, y = Y.train),
nvmax = p)
d.summary = summary(d.full)
d.summary
x_cols = colnames(X_mat, do.NULL = FALSE, prefix = "x.")
for(i in 1:p){
}
x_train
X_train
X_mat.train
coef(d.full, id = 1)
coef(d.full, id = 3)
d.full = regsubsets(y ~ ., data = data.frame(x = X_mat.train, y = Y.train),
nvmax = p)
d.summary = summary(d.full)
d.summary
mse.train = rep(NA, p)
x_cols = colnames(X_mat, do.NULL = FALSE, prefix = "x.")
for(i in 1:p){
c_i = coef(d.full, id = i)
Y.train.pred = as.matrix(X_mat.train[, x_cols %in% names(coefi)] %*%
coefi[names(coefi) %in% x_cols])
mse.train[i] = mean((y.pred - Y.train.pred)^2)
}
d.full = regsubsets(y ~ ., data = data.frame(x = X_mat.train, y = Y.train),
nvmax = p)
d.summary = summary(d.full)
d.summary
mse.train = rep(NA, p)
x_cols = colnames(X_mat, do.NULL = FALSE, prefix = "x.")
for(i in 1:p){
c_i = coef(d.full, id = i)
Y.train.pred = as.matrix(X_mat.train[, x_cols %in% names(c_i)] %*%
c_i[names(c_i) %in% x_cols])
mse.train[i] = mean((y.pred - Y.train.pred)^2)
}
X_mat.train[, x_cols %in% names(c_i)]
c_i[names(c_i) %in% x_cols]
X_mat.train[, x_cols %in% names(c_i)] %*% c_i[names(c_i) %in% x_cols]
X_mat.train[, x_cols %in% names(c_i)] * c_i[names(c_i) %in% x_cols]
X_mat.train[, x_cols %in% names(c_i)] * as.matrix(c_i[names(c_i) %in% x_cols])
d.full = regsubsets(y ~ ., data = data.frame(x = X_mat.train, y = Y.train),
nvmax = p)
d.summary = summary(d.full)
d.summary
mse.train = rep(NA, p)
x_cols = colnames(X_mat, do.NULL = FALSE, prefix = "x.")
for(i in 1:p){
c_i = coef(d.full, id = i)
Y.train.pred = as.matrix(c_i[names(c_i) %in% x_cols] %*%X_mat.train[, x_cols %in% names(c_i)]
)
mse.train[i] = mean((y.pred - Y.train.pred)^2)
}
d.full = regsubsets(y ~ ., data = data.frame(x = X_mat.train, y = Y.train),
nvmax = p)
d.summary = summary(d.full)
d.summary
mse.train = rep(NA, p)
x_cols = colnames(X_mat, do.NULL = FALSE, prefix = "x.")
for(i in 1:p){
c_i = coef(d.full, id = i)
Y.train.pred = as.matrix(c_i[names(c_i) %in% x_cols] %*%X_mat.train[, x_cols %in% names(c_i)]
)
mse.train[i] = mean((Y.pred - Y.train.pred)^2)
}
d.full = regsubsets(y ~ ., data = data.frame(x = X_mat.train, y = Y.train),
nvmax = p)
d.summary = summary(d.full)
d.summary
mse.train = rep(NA, p)
x_cols = colnames(X_mat, do.NULL = FALSE, prefix = "x.")
for(i in 1:p){
c_i = coef(d.full, id = i)
Y.train.pred = as.matrix(c_i[names(c_i) %in% x_cols] %*%X_mat.train[, x_cols %in% names(c_i)]
)
mse.train[i] = mean((Y.train- Y.train.pred)^2)
}
d.full = regsubsets(y ~ ., data = data.frame(x = X_mat.train, y = Y.train),
nvmax = p)
d.summary = summary(d.full)
d.summary
mse.train = rep(NA, p)
x_cols = colnames(X_mat, do.NULL = FALSE, prefix = "x.")
for(i in 1:p){
c_i = coef(d.full, id = i)
if(i > 1){
Y.train.pred = as.matrix(X_mat.train[, x_cols %in% names(c_i)] %*%
c_i[names(c_i) %in% x_cols])
}
else
{
Y.train.pred = as.matrix(X_mat.train[, x_cols %in% names(c_i)] *
c_i[names(c_i) %in% x_cols])
}
mse.train[i] = mean((Y.train - Y.train.pred)^2)
}
plot(mse.train, ylab = "Training MSE", pch = 19, type = "b")
plot(mse.train, ylab = "Training MSE", pch = 19, type = "b", col = "blue")
plot(mse.train, ylab = "Training MSE", pch = 19, type = "b", col = "blue")
plot(mse.train, ylab = "Training MSE",xlab = "Subset Size", pch = 18, type = "b", col = "blue")
plot(mse.train, ylab = "Training MSE",xlab = "Subset Size", pch = 8, type = "b", col = "blue")
plot(mse.train, ylab = "Training MSE",xlab = "Subset Size", pch = 9, type = "b", col = "blue")
plot(mse.train, ylab = "Training MSE",xlab = "Subset Size", pch = 10, type = "b", col = "blue")
plot(mse.train, ylab = "Training MSE",xlab = "Subset Size", pch = 10, type = "b", col = "blue")
plot(mse.train, ylab = "Training MSE",xlab = "Subset Size", pch = 11, type = "b", col = "blue")
plot(mse.train, ylab = "Training MSE",xlab = "Subset Size", pch = 12, type = "b", col = "blue")
plot(mse.train, ylab = "Training MSE",xlab = "Subset Size", pch = 13, type = "b", col = "blue")
plot(mse.train, ylab = "Training MSE",xlab = "Subset Size", pch = 14, type = "b", col = "blue")
plot(mse.train, ylab = "Training MSE",xlab = "Subset Size", pch = 15, type = "b", col = "blue")
plot(mse.train, ylab = "Training MSE",xlab = "Subset Size", pch = 16, type = "b", col = "blue")
mse.test = rep(NA, p)
x_cols = colnames(X_mat, do.NULL = FALSE, prefix = "x.")
for(i in 1:p){
c_i = coef(d.full, id = i)
if(i > 1){
Y.test.pred = as.matrix(X_mat.test[, x_cols %in% names(c_i)] %*%
c_i[names(c_i) %in% x_cols])
}
else
{
Y.test.pred = as.matrix(X_mat.test[, x_cols %in% names(c_i)] *
c_i[names(c_i) %in% x_cols])
}
mse.test[i] = mean((Y.test - Y.test.pred)^2)
}
plot(mse.test, ylab = "test MSE",xlab = "Subset Size", pch = 16, type = "b", col = "blue")
which.min(mse.test)
coef(d.full, id = which.min(mse.test))
coef(d.full, id = which.min(mse.test))
Beta
beta_err = rep(NA, p)
x_cols = colnames(X_mat, do.NULL = FALSE, prefix = "x.")
for(i in 1:p){
c_i = coef(d.full, id = i)
beta_err[i] = sqrt(sum((Beta[x_cols %in% names(c_i)] - c_i[names(c_i) %in% x_cols])^2))
}
plot(x = 1:p, y = beta_err, xlab = "Subset Size", ylab = "Error Between Estimated and True Coefficients")
beta_err = rep(NA, p)
x_cols = colnames(X_mat, do.NULL = FALSE, prefix = "x.")
for(i in 1:p){
c_i = coef(d.full, id = i)
beta_err[i] = sqrt(sum((Beta[x_cols %in% names(c_i)] - c_i[names(c_i) %in% x_cols])^2))
}
plot(x = 1:p, y = beta_err, xlab = "Subset Size", ylab = "Error Between Estimated and True Coefficients")
which.min(beta_err)
which.min(beta_err, 2)
which.min(beta_err)
sort(beta_err)[-1]
sort(beta_err)[,-1]
sort(beta_err)[2]
which.min(beta_err)
coef(d.full, id = which.min(beta_err))
help(where)
which(beta_err = sort(beta_err)[2])
which(beta_err == sort(beta_err)[2])
